buildscript {
    ext.kotlin_version = '1.2.30'
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:' + ANDROID_GRADLE_VERSION
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:' + SONARQUBE_VERSION

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        google()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// Define versions in a single place
ext {
    // app version
    versionCode = 1
    versionName = '0.0.1'

    // Sdk and tools
    // Support library and architecture components support minSdk 14 and above.
    minSdkVersion = 14
    targetSdkVersion = 26
    compileSdkVersion = 26
    buildToolsVersion = '27.0.3'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    // App dependencies
    supportLibraryVersion = '27.1.0'
    guavaVersion = '24.0-android'
    junitVersion = '4.12'
    robolectricVersion = '3.6.1'
    mockitoVersion = '2.15.0'
    powerMockito = '1.6.2'
    hamcrestVersion = '1.3'
    runnerVersion = '1.0.1'
    rulesVersion = '1.0.1'
    espressoVersion = '3.0.1'

    // Architecture Components dependencies
    roomVersion = '1.1.0-alpha3'
    archLifecycleVersion = '1.1.0'

    daggerVersion = '2.14.1'
    timberVersion = '4.6.0'
}

/*
 * Workaround for https://code.google.com/p/android/issues/detail?id=182715
 *
 * The Android Gradle plugin is creating DataBindingExportBuildInfoTasks for the instrumentation
 * APK that generates from the app APKs layouts. This creates duplicate classes in the app and
 * instrumentation APK which leads to
 *      java.lang.IllegalAccessError: Class ref in pre-verified class resolved to unexpected implementation
 * on older devices.
 *
 * The workaround is to get the DataBindingExportBuildInfoTasks tasks for the instrumentation APK
 * and delete the files right after it creates them.
 */
subprojects {
    tasks.withType(com.android.build.gradle.internal.tasks.databinding.DataBindingExportBuildInfoTask) { task ->
        if (task.name.endsWith("AndroidTest")) {
            task.finalizedBy(tasks.create("${task.name}Workaround") << {
                task.output.deleteDir()
            })
        }
    }
}
