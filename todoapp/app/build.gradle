apply plugin: 'com.android.application'
apply plugin: 'org.sonarqube'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.example.android.architecture.blueprints.todomvvmlive"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        debug {
            minifyEnabled true
            // Uses new built-in shrinker http://tools.android.com/tech-docs/new-build-system/built-in-shrinker
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }

        release {
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }
    }
    flavorDimensions "default"

    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mock {
            dimension "default"
            applicationIdSuffix = ".mock"
        }
        prod {
            dimension "default"
        }
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name == 'release'
                && variant.getFlavors().get(0).name == 'mock') {
            variant.setIgnore(true)
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility rootProject.sourceCompatibility
        targetCompatibility rootProject.targetCompatibility
    }
}

/*
 Dependency versions are defined in the top level build.gradle file. This helps keeping track of
 all versions in a single place. This improves readability and helps managing project complexity.
 */
dependencies {
    // App's dependencies, including test
    implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:design:$rootProject.supportLibraryVersion"
    implementation "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    implementation "com.google.guava:guava:$rootProject.guavaVersion"

    // google dagger
    implementation 'com.google.dagger:dagger:' + daggerVersion
    annotationProcessor 'com.google.dagger:dagger-compiler:' + daggerVersion

    implementation 'com.google.dagger:dagger-android:' + daggerVersion
    implementation 'com.google.dagger:dagger-android-support:' + daggerVersion
    annotationProcessor 'com.google.dagger:dagger-android-processor:' + daggerVersion

    // Architecture Components
    implementation 'android.arch.lifecycle:runtime:' + archLifecycleVersion
    implementation 'android.arch.lifecycle:extensions:' + archLifecycleVersion
    implementation 'android.arch.lifecycle:common-java8:' + archLifecycleVersion
    annotationProcessor 'android.arch.lifecycle:compiler:' + archLifecycleVersion

    implementation 'android.arch.persistence.room:runtime:' + roomVersion
    implementation 'android.arch.persistence.room:rxjava2:' + roomVersion
    implementation 'android.arch.persistence.room:testing:' + roomVersion
    annotationProcessor 'android.arch.persistence.room:compiler:' + roomVersion


    // timer
    implementation 'com.jakewharton.timber:timber:' + timberVersion

    // Dependencies for local unit tests
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation 'org.robolectric:robolectric:' + robolectricVersion
    testImplementation "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"

    testImplementation "android.arch.core:core-testing:$rootProject.archLifecycleVersion"
    testImplementation 'org.mockito:mockito-core:' + mockitoVersion

    // Test helpers for Room
    testImplementation 'android.arch.persistence.room:testing:' + roomVersion


    // Android Testing Support Library's runner and rules
    androidTestImplementation "com.android.support.test:runner:$rootProject.ext.runnerVersion"
    androidTestImplementation "com.android.support.test:rules:$rootProject.ext.rulesVersion"

    androidTestImplementation "android.arch.persistence.room:testing:$rootProject.roomVersion"

    // Dependencies for Android unit tests
    androidTestImplementation "junit:junit:$rootProject.ext.junitVersion"
    androidTestImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'

    // Espresso UI Testing
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$rootProject.espressoVersion"
    androidTestImplementation "com.android.support.test.espresso.idling:idling-concurrent:$rootProject.espressoVersion"
    implementation "com.android.support.test.espresso:espresso-idling-resource:$rootProject.espressoVersion"

    // Resolve conflicts between main and test APK:
    androidTestImplementation "com.android.support:support-annotations:$rootProject.supportLibraryVersion"
    androidTestImplementation "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    androidTestImplementation "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
    androidTestImplementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    androidTestImplementation "com.android.support:support-compat:$rootProject.supportLibraryVersion"
    androidTestImplementation "com.android.support:design:$rootProject.supportLibraryVersion"
    implementation "com.google.code.findbugs:jsr305:2.0.1"

    androidTestImplementation 'org.mockito:mockito-android:' + mockitoVersion

    androidTestAnnotationProcessor 'com.google.dagger:dagger-compiler:' + daggerVersion
    androidTestAnnotationProcessor 'com.google.dagger:dagger-android-processor:' + daggerVersion
}


sonarqube {
    properties {
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.language', 'java'

        property 'sonar.host.url', 'http://localhost:9000' // Address of Sonar server
        property 'sonar.sources', 'src/main' // Sources
        property 'sonar.projectKey', "$project.name:$project.android.defaultConfig.versionName-$project.android.defaultConfig.versionCode"
        property 'sonar.projectName', "$project.group:$project.android.defaultConfig.versionName-$project.android.defaultConfig.versionCode"
        property 'sonar.projectDescription', "$project.group"
        property 'sonar.projectVersion', "$project.android.defaultConfig.versionName-$project.android.defaultConfig.versionCode"
        property 'sonar.projectBaseDir', "$project.projectDir"

//        property 'sonar.exclusions', 'src/androidTest/java/**, src/androidTestMock/java/**, src/test/java/**'

        property 'sonar.android.lint.report', 'build/outputs/lint-results.xml'
    }
}
